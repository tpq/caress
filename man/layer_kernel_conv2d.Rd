% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/2-layers-learnable.R
\name{layer_kernel_conv2d}
\alias{layer_kernel_conv2d}
\title{Perform Kernel Convolution}
\usage{
layer_kernel_conv2d(layer, kernel, name = NULL)
}
\arguments{
\item{layer}{The incoming layer.}

\item{kernel}{A layer that represents a kernel.}

\item{name}{A string. The prefix label for all layers.}
}
\value{
The result of \code{k_conv2d}.
}
\description{
This function calls \code{k_conv2d} as a "lambda" layer.
}
\examples{
library(keras)
library(caress)
set.seed(1)
index <- sample(1:nrow(iris))
x <- as.matrix(iris[index,1:4])
y <- to_categorical(as.numeric(iris[index,5])-1)
k_clear_session()
input <- from_input(x)
reshape <- input \%>\%
  layer_dense(4*20) \%>\%
  layer_reshape(c(4,20,1))
weight <- input \%>\%
  layer_learnable_array(c(1, 20, 4)) \%>\%
  layer_lambda(f = function(x) k_transpose(x))
target <- layer_kernel_conv2d(reshape, weight) \%>\%
  layer_flatten() \%>\%
  to_output(y)
m <- prepare(input, target)
build(m, x, y, batch_size = 4, epochs = 100)
}
